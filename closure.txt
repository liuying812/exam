闭包的定义：
有时候我们需要得到函数内的局部变量，正常情况下是办不到的，只有通过在该函数内部再定义一个函数：
```
　　function f1(){

　　　　var a = 666;

　　　　function f2(){
　　　　　　alert(a); // 666
　　　　}

　　}
```
上述代码中a 和 f2 函数组合就叫闭包。闭包是指能够读取其他函数内部变量的函数。也可以说，如果一个函数使用了它范围外的变量，那么这块整体就是闭包。

闭包的用途：
一个是可以读取其函数本身之外的变量，
另一个是让这些变量的值始终保持在内存中。

```
　　function f1(){

　　　　var n=999;

　　　　nAdd=function(){n+=1}

　　　　function f2(){
　　　　　　alert(n);
　　　　}

　　　　return f2;

　　}

　　var result=f1();

　　result(); // 999

　　nAdd();

　　result(); // 1000
```
result实际上就是闭包f2函数。它一共运行了两次，第一次的值是999，第二次的值是1000。这证明了，函数f1中的局部变量n一直保存在内存中，并没有在f1调用后被自动清除。

因为f1是f2的父函数，而f2被赋给了一个全局变量，这导致f2始终在内存中，而f2的存在依赖于f1，因此f1也始终在内存中，不会在调用结束后，被垃圾回收机制（garbage collection）回收。

闭包的注意点：
ⅰ由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。

ⅱ闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。
